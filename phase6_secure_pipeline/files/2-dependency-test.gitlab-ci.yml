stages:
  - secrets-scan
  - dependency-scan # New Stage Added

variables:
  GITLEAKS_REPORT: "gitleaks-report.json"
  GIT_STRATEGY: "clone"
  GIT_CHECKOUT: "true"
  GIT_DEPTH: "0"
  GIT_CLEAN_FLAGS: "-ffdx"

gitleaks_scan:
  stage: secrets-scan
  image:
    name: zricethezav/gitleaks:v8.18.4 
    entrypoint: [""]   
  rules:
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
  script:
    - gitleaks detect --source . --report-format json --report-path "$GITLEAKS_REPORT" --exit-code 1
  artifacts:
    when: always
    expire_in: 7 days
    paths:
      - $GITLEAKS_REPORT

# New Stage Added
dependency_scan:
  stage: dependency-scan
  image: node:22-alpine
  before_script:
    - npm ci --ignore-scripts
  script:
    # Fail if High or Critical vulns found
    - npm audit --audit-level=high
  artifacts:
    when: always
    paths:
       - npm-audit.json
    expire_in: 7 days
  after_script:
    # Since the initial scan can fail, we need to do another scan that does not fail. 
    # This scan will produce an output file that we can persist
    - npm audit --json > npm-audit.json || true 